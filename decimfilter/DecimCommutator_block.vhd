-- -------------------------------------------------------------
-- 
-- File Name: Q:\Users\Qlab\Documents\Blake\iirfilter\hdlsrc\polyphaseIIR\DecimCommutator_block.vhd
-- Created: 2014-05-09 14:18:25
-- 
-- Generated by MATLAB 8.3 and HDL Coder 3.4
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DecimCommutator_block
-- Source Path: polyphaseIIR/IIRDecimFilter/Stage2/DecimCommutator
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DecimCommutator_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb_1_4_1                         :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        input                             :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En11
        output1                           :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En11
        output2                           :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En11
        );
END DecimCommutator_block;


ARCHITECTURE rtl OF DecimCommutator_block IS

  -- Signals
  SIGNAL input_signed                     : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL input_1                          : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL downsamp1_out1                   : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL delay2_out1                      : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL delay1_out1                      : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL delay1_out1_1                    : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL downsamp2_out1                   : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL delay3_out1                      : signed(13 DOWNTO 0);  -- sfix14_En11

BEGIN
  input_signed <= signed(input);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        input_1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        input_1 <= input_signed;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  -- Downsample by 2 register (Sample offset 0)
  downsamp1_output_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        downsamp1_out1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_4_1 = '1' THEN
        downsamp1_out1 <= input_1;
      END IF;
    END IF;
  END PROCESS downsamp1_output_process;


  delay2_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        delay2_out1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_4_0 = '1' THEN
        delay2_out1 <= downsamp1_out1;
      END IF;
    END IF;
  END PROCESS delay2_process;


  output1 <= std_logic_vector(delay2_out1);

  delay1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        delay1_out1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        delay1_out1 <= input_signed;
      END IF;
    END IF;
  END PROCESS delay1_process;


  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        delay1_out1_1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        delay1_out1_1 <= delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  -- Downsample by 2 register (Sample offset 0)
  downsamp2_output_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        downsamp2_out1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_4_1 = '1' THEN
        downsamp2_out1 <= delay1_out1_1;
      END IF;
    END IF;
  END PROCESS downsamp2_output_process;


  delay3_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        delay3_out1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_4_0 = '1' THEN
        delay3_out1 <= downsamp2_out1;
      END IF;
    END IF;
  END PROCESS delay3_process;


  output2 <= std_logic_vector(delay3_out1);

END rtl;

