-- -------------------------------------------------------------
-- 
-- File Name: Q:\Users\Qlab\Documents\Blake\iirfilter\hdlsrc\polyphaseIIR\Stage1.vhd
-- Created: 2014-05-12 13:26:15
-- 
-- Generated by MATLAB 8.3 and HDL Coder 3.4
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Stage1
-- Source Path: polyphaseIIR/IIRDecimFilter/Stage1
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Stage1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        Input                             :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En11
        Output                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En11
        );
END Stage1;


ARCHITECTURE rtl OF Stage1 IS

  -- Component Declarations
  COMPONENT DecimCommutator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          input                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En11
          output1                         :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En11
          output2                         :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En11
          );
  END COMPONENT;

  COMPONENT Phase1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          Input                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En11
          output                          :   OUT   std_logic_vector(12 DOWNTO 0)  -- sfix13_En11
          );
  END COMPONENT;

  COMPONENT Phase2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          Input                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En11
          output                          :   OUT   std_logic_vector(12 DOWNTO 0)  -- sfix13_En11
          );
  END COMPONENT;

  -- Signals
  SIGNAL Input_signed                     : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL Input_1                          : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL DecimCommutator_out1             : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL DecimCommutator_out2             : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL DecimCommutator_out1_signed      : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL delay2_out1                      : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL Phase1_out1                      : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL Phase1_out1_signed               : signed(12 DOWNTO 0);  -- sfix13_En11
  SIGNAL Phase1_out1_buff                 : signed(12 DOWNTO 0);  -- sfix13_En11
  SIGNAL DecimCommutator_out2_signed      : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL delay3_out1                      : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL Phase2_out1                      : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL Phase2_out1_signed               : signed(12 DOWNTO 0);  -- sfix13_En11
  SIGNAL Phase2_out1_buff                 : signed(12 DOWNTO 0);  -- sfix13_En11
  SIGNAL Sum1_out1                        : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL delay1_out1                      : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL Gain_cast                        : signed(27 DOWNTO 0);  -- sfix28_En22
  SIGNAL Gain_out1                        : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL delay6_out1                      : signed(13 DOWNTO 0);  -- sfix14_En11

BEGIN
  u_DecimCommutator : DecimCommutator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              input => std_logic_vector(Input_1),  -- sfix12_En11
              output1 => DecimCommutator_out1,  -- sfix12_En11
              output2 => DecimCommutator_out2  -- sfix12_En11
              );

  u_Phase1 : Phase1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_0 => enb_1_2_0,
              Input => std_logic_vector(delay2_out1),  -- sfix12_En11
              output => Phase1_out1  -- sfix13_En11
              );

  u_Phase2 : Phase2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_0 => enb_1_2_0,
              Input => std_logic_vector(delay3_out1),  -- sfix12_En11
              output => Phase2_out1  -- sfix13_En11
              );

  Input_signed <= signed(Input);

  in_0_pipe_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Input_1 <= to_signed(2#000000000000#, 12);
      ELSIF enb = '1' THEN
        Input_1 <= Input_signed;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  DecimCommutator_out1_signed <= signed(DecimCommutator_out1);

  delay2_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        delay2_out1 <= to_signed(2#000000000000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        delay2_out1 <= DecimCommutator_out1_signed;
      END IF;
    END IF;
  END PROCESS delay2_process;


  Phase1_out1_signed <= signed(Phase1_out1);

  cd_0_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Phase1_out1_buff <= to_signed(2#0000000000000#, 13);
      ELSIF enb_1_2_0 = '1' THEN
        Phase1_out1_buff <= Phase1_out1_signed;
      END IF;
    END IF;
  END PROCESS cd_0_process;


  DecimCommutator_out2_signed <= signed(DecimCommutator_out2);

  delay3_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        delay3_out1 <= to_signed(2#000000000000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        delay3_out1 <= DecimCommutator_out2_signed;
      END IF;
    END IF;
  END PROCESS delay3_process;


  Phase2_out1_signed <= signed(Phase2_out1);

  cd_1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        Phase2_out1_buff <= to_signed(2#0000000000000#, 13);
      ELSIF enb_1_2_0 = '1' THEN
        Phase2_out1_buff <= Phase2_out1_signed;
      END IF;
    END IF;
  END PROCESS cd_1_process;


  Sum1_out1 <= (resize(Phase1_out1_buff, 14)) + (resize(Phase2_out1_buff, 14));

  delay1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        delay1_out1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        delay1_out1 <= Sum1_out1;
      END IF;
    END IF;
  END PROCESS delay1_process;


  Gain_cast <= resize(delay1_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 28);
  Gain_out1 <= Gain_cast(24 DOWNTO 11);

  delay6_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF reset = '1' THEN
        delay6_out1 <= to_signed(2#00000000000000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        delay6_out1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS delay6_process;


  Output <= std_logic_vector(delay6_out1);

END rtl;

